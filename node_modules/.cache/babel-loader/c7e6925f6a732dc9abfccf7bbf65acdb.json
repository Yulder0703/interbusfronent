{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\n// SSR safe client-side ID attribute generation\n// ID's can only be generated client-side, after mount\n// `this._uid` is not synched between server and client\nimport { COMPONENT_UID_KEY, Vue } from '../vue';\nimport { PROP_TYPE_STRING } from '../constants/props';\nimport { makeProp } from '../utils/props'; // --- Props ---\n\nexport var props = {\n  id: makeProp(PROP_TYPE_STRING)\n}; // --- Mixin ---\n// @vue/component\n\nexport var idMixin = Vue.extend({\n  props: props,\n  data: function data() {\n    return {\n      localId_: null\n    };\n  },\n  computed: {\n    safeId: function safeId() {\n      // Computed property that returns a dynamic function for creating the ID\n      // Reacts to changes in both `.id` and `.localId_` and regenerates a new function\n      var id = this.id || this.localId_; // We return a function that accepts an optional suffix string\n      // So this computed prop looks and works like a method\n      // but benefits from Vue's computed prop caching\n\n      var fn = function fn(suffix) {\n        if (!id) {\n          return null;\n        }\n\n        suffix = String(suffix || '').replace(/\\s+/g, '_');\n        return suffix ? id + '_' + suffix : id;\n      };\n\n      return fn;\n    }\n  },\n  mounted: function mounted() {\n    var _this = this; // `mounted()` only occurs client-side\n\n\n    this.$nextTick(function () {\n      // Update DOM with auto-generated ID after mount\n      // to prevent SSR hydration errors\n      _this.localId_ = \"__BVID__\".concat(_this[COMPONENT_UID_KEY]);\n    });\n  }\n});","map":{"version":3,"sources":["C:/Users/usuario/Escritorio/clon/interbusfronent/node_modules/bootstrap-vue/esm/mixins/id.js"],"names":["COMPONENT_UID_KEY","Vue","PROP_TYPE_STRING","makeProp","props","id","idMixin","extend","data","localId_","computed","safeId","fn","suffix","String","replace","mounted","_this","$nextTick","concat"],"mappings":";;AAAA;AACA;AACA;AACA,SAASA,iBAAT,EAA4BC,GAA5B,QAAuC,QAAvC;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,QAAT,QAAyB,gBAAzB,C,CAA2C;;AAE3C,OAAO,IAAIC,KAAK,GAAG;AACjBC,EAAAA,EAAE,EAAEF,QAAQ,CAACD,gBAAD;AADK,CAAZ,C,CAEJ;AACH;;AAEA,OAAO,IAAII,OAAO,GAAGL,GAAG,CAACM,MAAJ,CAAW;AAC9BH,EAAAA,KAAK,EAAEA,KADuB;AAE9BI,EAAAA,IAAI,EAAE,SAASA,IAAT,GAAgB;AACpB,WAAO;AACLC,MAAAA,QAAQ,EAAE;AADL,KAAP;AAGD,GAN6B;AAO9BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,MAAM,EAAE,SAASA,MAAT,GAAkB;AACxB;AACA;AACA,UAAIN,EAAE,GAAG,KAAKA,EAAL,IAAW,KAAKI,QAAzB,CAHwB,CAGW;AACnC;AACA;;AAEA,UAAIG,EAAE,GAAG,SAASA,EAAT,CAAYC,MAAZ,EAAoB;AAC3B,YAAI,CAACR,EAAL,EAAS;AACP,iBAAO,IAAP;AACD;;AAEDQ,QAAAA,MAAM,GAAGC,MAAM,CAACD,MAAM,IAAI,EAAX,CAAN,CAAqBE,OAArB,CAA6B,MAA7B,EAAqC,GAArC,CAAT;AACA,eAAOF,MAAM,GAAGR,EAAE,GAAG,GAAL,GAAWQ,MAAd,GAAuBR,EAApC;AACD,OAPD;;AASA,aAAOO,EAAP;AACD;AAlBO,GAPoB;AA2B9BI,EAAAA,OAAO,EAAE,SAASA,OAAT,GAAmB;AAC1B,QAAIC,KAAK,GAAG,IAAZ,CAD0B,CAG1B;;;AACA,SAAKC,SAAL,CAAe,YAAY;AACzB;AACA;AACAD,MAAAA,KAAK,CAACR,QAAN,GAAiB,WAAWU,MAAX,CAAkBF,KAAK,CAACjB,iBAAD,CAAvB,CAAjB;AACD,KAJD;AAKD;AApC6B,CAAX,CAAd","sourcesContent":["// SSR safe client-side ID attribute generation\r\n// ID's can only be generated client-side, after mount\r\n// `this._uid` is not synched between server and client\r\nimport { COMPONENT_UID_KEY, Vue } from '../vue';\r\nimport { PROP_TYPE_STRING } from '../constants/props';\r\nimport { makeProp } from '../utils/props'; // --- Props ---\r\n\r\nexport var props = {\r\n  id: makeProp(PROP_TYPE_STRING)\r\n}; // --- Mixin ---\r\n// @vue/component\r\n\r\nexport var idMixin = Vue.extend({\r\n  props: props,\r\n  data: function data() {\r\n    return {\r\n      localId_: null\r\n    };\r\n  },\r\n  computed: {\r\n    safeId: function safeId() {\r\n      // Computed property that returns a dynamic function for creating the ID\r\n      // Reacts to changes in both `.id` and `.localId_` and regenerates a new function\r\n      var id = this.id || this.localId_; // We return a function that accepts an optional suffix string\r\n      // So this computed prop looks and works like a method\r\n      // but benefits from Vue's computed prop caching\r\n\r\n      var fn = function fn(suffix) {\r\n        if (!id) {\r\n          return null;\r\n        }\r\n\r\n        suffix = String(suffix || '').replace(/\\s+/g, '_');\r\n        return suffix ? id + '_' + suffix : id;\r\n      };\r\n\r\n      return fn;\r\n    }\r\n  },\r\n  mounted: function mounted() {\r\n    var _this = this;\r\n\r\n    // `mounted()` only occurs client-side\r\n    this.$nextTick(function () {\r\n      // Update DOM with auto-generated ID after mount\r\n      // to prevent SSR hydration errors\r\n      _this.localId_ = \"__BVID__\".concat(_this[COMPONENT_UID_KEY]);\r\n    });\r\n  }\r\n});"]},"metadata":{},"sourceType":"module"}