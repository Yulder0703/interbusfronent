{"ast":null,"code":"import \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.array.map.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { Vue } from '../../../vue';\nimport { EVENT_NAME_ROW_CLICKED, EVENT_NAME_ROW_CONTEXTMENU, EVENT_NAME_ROW_DBLCLICKED, EVENT_NAME_ROW_MIDDLE_CLICKED } from '../../../constants/events';\nimport { CODE_DOWN, CODE_END, CODE_ENTER, CODE_HOME, CODE_SPACE, CODE_UP } from '../../../constants/key-codes';\nimport { PROP_TYPE_ARRAY_OBJECT_STRING } from '../../../constants/props';\nimport { arrayIncludes, from as arrayFrom } from '../../../utils/array';\nimport { attemptFocus, closest, isActiveElement, isElement } from '../../../utils/dom';\nimport { stopEvent } from '../../../utils/events';\nimport { sortKeys } from '../../../utils/object';\nimport { makeProp, pluckProps } from '../../../utils/props';\nimport { BTbody, props as BTbodyProps } from '../tbody';\nimport { filterEvent } from './filter-event';\nimport { textSelectionActive } from './text-selection-active';\nimport { tbodyRowMixin, props as tbodyRowProps } from './mixin-tbody-row'; // --- Helper methods ---\n\nvar getCellSlotName = function getCellSlotName(value) {\n  return \"cell(\".concat(value || '', \")\");\n}; // --- Props ---\n\n\nexport var props = sortKeys(_objectSpread(_objectSpread(_objectSpread({}, BTbodyProps), tbodyRowProps), {}, {\n  tbodyClass: makeProp(PROP_TYPE_ARRAY_OBJECT_STRING)\n})); // --- Mixin ---\n// @vue/component\n\nexport var tbodyMixin = Vue.extend({\n  mixins: [tbodyRowMixin],\n  props: props,\n  beforeDestroy: function beforeDestroy() {\n    this.$_bodyFieldSlotNameCache = null;\n  },\n  methods: {\n    // Returns all the item TR elements (excludes detail and spacer rows)\n    // `this.$refs['item-rows']` is an array of item TR components/elements\n    // Rows should all be `<b-tr>` components, but we map to TR elements\n    // Also note that `this.$refs['item-rows']` may not always be in document order\n    getTbodyTrs: function getTbodyTrs() {\n      var $refs = this.$refs;\n      var tbody = $refs.tbody ? $refs.tbody.$el || $refs.tbody : null;\n      var trs = ($refs['item-rows'] || []).map(function (tr) {\n        return tr.$el || tr;\n      });\n      return tbody && tbody.children && tbody.children.length > 0 && trs && trs.length > 0 ? arrayFrom(tbody.children).filter(function (tr) {\n        return arrayIncludes(trs, tr);\n      }) :\n      /* istanbul ignore next */\n      [];\n    },\n    // Returns index of a particular TBODY item TR\n    // We set `true` on closest to include self in result\n    getTbodyTrIndex: function getTbodyTrIndex(el) {\n      /* istanbul ignore next: should not normally happen */\n      if (!isElement(el)) {\n        return -1;\n      }\n\n      var tr = el.tagName === 'TR' ? el : closest('tr', el, true);\n      return tr ? this.getTbodyTrs().indexOf(tr) : -1;\n    },\n    // Emits a row event, with the item object, row index and original event\n    emitTbodyRowEvent: function emitTbodyRowEvent(type, event) {\n      if (type && this.hasListener(type) && event && event.target) {\n        var rowIndex = this.getTbodyTrIndex(event.target);\n\n        if (rowIndex > -1) {\n          // The array of TRs correlate to the `computedItems` array\n          var item = this.computedItems[rowIndex];\n          this.$emit(type, item, rowIndex, event);\n        }\n      }\n    },\n    tbodyRowEvtStopped: function tbodyRowEvtStopped(event) {\n      return this.stopIfBusy && this.stopIfBusy(event);\n    },\n    // Delegated row event handlers\n    onTbodyRowKeydown: function onTbodyRowKeydown(event) {\n      // Keyboard navigation and row click emulation\n      var target = event.target,\n          keyCode = event.keyCode;\n\n      if (this.tbodyRowEvtStopped(event) || target.tagName !== 'TR' || !isActiveElement(target) || target.tabIndex !== 0) {\n        // Early exit if not an item row TR\n        return;\n      }\n\n      if (arrayIncludes([CODE_ENTER, CODE_SPACE], keyCode)) {\n        // Emulated click for keyboard users, transfer to click handler\n        stopEvent(event);\n        this.onTBodyRowClicked(event);\n      } else if (arrayIncludes([CODE_UP, CODE_DOWN, CODE_HOME, CODE_END], keyCode)) {\n        // Keyboard navigation\n        var rowIndex = this.getTbodyTrIndex(target);\n\n        if (rowIndex > -1) {\n          stopEvent(event);\n          var trs = this.getTbodyTrs();\n          var shift = event.shiftKey;\n\n          if (keyCode === CODE_HOME || shift && keyCode === CODE_UP) {\n            // Focus first row\n            attemptFocus(trs[0]);\n          } else if (keyCode === CODE_END || shift && keyCode === CODE_DOWN) {\n            // Focus last row\n            attemptFocus(trs[trs.length - 1]);\n          } else if (keyCode === CODE_UP && rowIndex > 0) {\n            // Focus previous row\n            attemptFocus(trs[rowIndex - 1]);\n          } else if (keyCode === CODE_DOWN && rowIndex < trs.length - 1) {\n            // Focus next row\n            attemptFocus(trs[rowIndex + 1]);\n          }\n        }\n      }\n    },\n    onTBodyRowClicked: function onTBodyRowClicked(event) {\n      // Don't emit event when the table is busy, the user clicked\n      // on a non-disabled control or is selecting text\n      if (this.tbodyRowEvtStopped(event) || filterEvent(event) || textSelectionActive(this.$el)) {\n        return;\n      }\n\n      this.emitTbodyRowEvent(EVENT_NAME_ROW_CLICKED, event);\n    },\n    onTbodyRowMiddleMouseRowClicked: function onTbodyRowMiddleMouseRowClicked(event) {\n      if (!this.tbodyRowEvtStopped(event) && event.which === 2) {\n        this.emitTbodyRowEvent(EVENT_NAME_ROW_MIDDLE_CLICKED, event);\n      }\n    },\n    onTbodyRowContextmenu: function onTbodyRowContextmenu(event) {\n      if (!this.tbodyRowEvtStopped(event)) {\n        this.emitTbodyRowEvent(EVENT_NAME_ROW_CONTEXTMENU, event);\n      }\n    },\n    onTbodyRowDblClicked: function onTbodyRowDblClicked(event) {\n      if (!this.tbodyRowEvtStopped(event) && !filterEvent(event)) {\n        this.emitTbodyRowEvent(EVENT_NAME_ROW_DBLCLICKED, event);\n      }\n    },\n    // Render the tbody element and children\n    // Note:\n    //   Row hover handlers are handled by the tbody-row mixin\n    //   As mouseenter/mouseleave events do not bubble\n    renderTbody: function renderTbody() {\n      var _this = this;\n\n      var items = this.computedItems,\n          renderBusy = this.renderBusy,\n          renderTopRow = this.renderTopRow,\n          renderEmpty = this.renderEmpty,\n          renderBottomRow = this.renderBottomRow;\n      var h = this.$createElement;\n      var hasRowClickHandler = this.hasListener(EVENT_NAME_ROW_CLICKED) || this.hasSelectableRowClick; // Prepare the tbody rows\n\n      var $rows = []; // Add the item data rows or the busy slot\n\n      var $busy = renderBusy ? renderBusy() : null;\n\n      if ($busy) {\n        // If table is busy and a busy slot, then return only the busy \"row\" indicator\n        $rows.push($busy);\n      } else {\n        // Table isn't busy, or we don't have a busy slot\n        // Create a slot cache for improved performance when looking up cell slot names\n        // Values will be keyed by the field's `key` and will store the slot's name\n        // Slots could be dynamic (i.e. `v-if`), so we must compute on each render\n        // Used by tbody-row mixin render helper\n        var cache = {};\n        var defaultSlotName = getCellSlotName();\n        defaultSlotName = this.hasNormalizedSlot(defaultSlotName) ? defaultSlotName : null;\n        this.computedFields.forEach(function (field) {\n          var key = field.key;\n          var slotName = getCellSlotName(key);\n          var lowercaseSlotName = getCellSlotName(key.toLowerCase());\n          cache[key] = _this.hasNormalizedSlot(slotName) ? slotName : _this.hasNormalizedSlot(lowercaseSlotName) ?\n          /* istanbul ignore next */\n          lowercaseSlotName : defaultSlotName;\n        }); // Created as a non-reactive property so to not trigger component updates\n        // Must be a fresh object each render\n\n        this.$_bodyFieldSlotNameCache = cache; // Add static top row slot (hidden in visibly stacked mode\n        // as we can't control `data-label` attr)\n\n        $rows.push(renderTopRow ? renderTopRow() : h()); // Render the rows\n\n        items.forEach(function (item, rowIndex) {\n          // Render the individual item row (rows if details slot)\n          $rows.push(_this.renderTbodyRow(item, rowIndex));\n        }); // Empty items / empty filtered row slot (only shows if `items.length < 1`)\n\n        $rows.push(renderEmpty ? renderEmpty() : h()); // Static bottom row slot (hidden in visibly stacked mode\n        // as we can't control `data-label` attr)\n\n        $rows.push(renderBottomRow ? renderBottomRow() : h());\n      } // Note: these events will only emit if a listener is registered\n\n\n      var handlers = {\n        auxclick: this.onTbodyRowMiddleMouseRowClicked,\n        // TODO:\n        //   Perhaps we do want to automatically prevent the\n        //   default context menu from showing if there is a\n        //   `row-contextmenu` listener registered\n        contextmenu: this.onTbodyRowContextmenu,\n        // The following event(s) is not considered A11Y friendly\n        dblclick: this.onTbodyRowDblClicked // Hover events (`mouseenter`/`mouseleave`) are handled by `tbody-row` mixin\n\n      }; // Add in click/keydown listeners if needed\n\n      if (hasRowClickHandler) {\n        handlers.click = this.onTBodyRowClicked;\n        handlers.keydown = this.onTbodyRowKeydown;\n      } // Assemble rows into the tbody\n\n\n      var $tbody = h(BTbody, {\n        class: this.tbodyClass || null,\n        props: pluckProps(BTbodyProps, this.$props),\n        // BTbody transfers all native event listeners to the root element\n        // TODO: Only set the handlers if the table is not busy\n        on: handlers,\n        ref: 'tbody'\n      }, $rows); // Return the assembled tbody\n\n      return $tbody;\n    }\n  }\n});","map":{"version":3,"sources":["C:/Users/varel/interbusweb/interbusfronent/node_modules/bootstrap-vue/esm/components/table/helpers/mixin-tbody.js"],"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","Vue","EVENT_NAME_ROW_CLICKED","EVENT_NAME_ROW_CONTEXTMENU","EVENT_NAME_ROW_DBLCLICKED","EVENT_NAME_ROW_MIDDLE_CLICKED","CODE_DOWN","CODE_END","CODE_ENTER","CODE_HOME","CODE_SPACE","CODE_UP","PROP_TYPE_ARRAY_OBJECT_STRING","arrayIncludes","from","arrayFrom","attemptFocus","closest","isActiveElement","isElement","stopEvent","sortKeys","makeProp","pluckProps","BTbody","props","BTbodyProps","filterEvent","textSelectionActive","tbodyRowMixin","tbodyRowProps","getCellSlotName","concat","tbodyClass","tbodyMixin","extend","mixins","beforeDestroy","$_bodyFieldSlotNameCache","methods","getTbodyTrs","$refs","tbody","$el","trs","map","tr","children","getTbodyTrIndex","el","tagName","indexOf","emitTbodyRowEvent","type","event","hasListener","rowIndex","item","computedItems","$emit","tbodyRowEvtStopped","stopIfBusy","onTbodyRowKeydown","keyCode","tabIndex","onTBodyRowClicked","shift","shiftKey","onTbodyRowMiddleMouseRowClicked","which","onTbodyRowContextmenu","onTbodyRowDblClicked","renderTbody","_this","items","renderBusy","renderTopRow","renderEmpty","renderBottomRow","h","$createElement","hasRowClickHandler","hasSelectableRowClick","$rows","$busy","cache","defaultSlotName","hasNormalizedSlot","computedFields","field","slotName","lowercaseSlotName","toLowerCase","renderTbodyRow","handlers","auxclick","contextmenu","dblclick","click","keydown","$tbody","class","$props","on","ref"],"mappings":";;;;;;;;;AAAA,SAASA,OAAT,CAAiBC,MAAjB,EAAyBC,cAAzB,EAAyC;AAAE,MAAIC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYF,MAAZ,CAAX;;AAAgC,MAAIG,MAAM,CAACC,qBAAX,EAAkC;AAAE,QAAIC,OAAO,GAAGF,MAAM,CAACC,qBAAP,CAA6BJ,MAA7B,CAAd;AAAoD,QAAIC,cAAJ,EAAoBI,OAAO,GAAGA,OAAO,CAACC,MAAR,CAAe,UAAUC,GAAV,EAAe;AAAE,aAAOJ,MAAM,CAACK,wBAAP,CAAgCR,MAAhC,EAAwCO,GAAxC,EAA6CE,UAApD;AAAiE,KAAjG,CAAV;AAA8GP,IAAAA,IAAI,CAACQ,IAAL,CAAUC,KAAV,CAAgBT,IAAhB,EAAsBG,OAAtB;AAAiC;;AAAC,SAAOH,IAAP;AAAc;;AAErV,SAASU,aAAT,CAAuBC,MAAvB,EAA+B;AAAE,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AAAE,QAAIG,MAAM,GAAGF,SAAS,CAACD,CAAD,CAAT,IAAgB,IAAhB,GAAuBC,SAAS,CAACD,CAAD,CAAhC,GAAsC,EAAnD;;AAAuD,QAAIA,CAAC,GAAG,CAAR,EAAW;AAAEf,MAAAA,OAAO,CAACI,MAAM,CAACc,MAAD,CAAP,EAAiB,IAAjB,CAAP,CAA8BC,OAA9B,CAAsC,UAAUC,GAAV,EAAe;AAAEC,QAAAA,eAAe,CAACP,MAAD,EAASM,GAAT,EAAcF,MAAM,CAACE,GAAD,CAApB,CAAf;AAA4C,OAAnG;AAAuG,KAApH,MAA0H,IAAIhB,MAAM,CAACkB,yBAAX,EAAsC;AAAElB,MAAAA,MAAM,CAACmB,gBAAP,CAAwBT,MAAxB,EAAgCV,MAAM,CAACkB,yBAAP,CAAiCJ,MAAjC,CAAhC;AAA4E,KAApH,MAA0H;AAAElB,MAAAA,OAAO,CAACI,MAAM,CAACc,MAAD,CAAP,CAAP,CAAwBC,OAAxB,CAAgC,UAAUC,GAAV,EAAe;AAAEhB,QAAAA,MAAM,CAACoB,cAAP,CAAsBV,MAAtB,EAA8BM,GAA9B,EAAmChB,MAAM,CAACK,wBAAP,CAAgCS,MAAhC,EAAwCE,GAAxC,CAAnC;AAAmF,OAApI;AAAwI;AAAE;;AAAC,SAAON,MAAP;AAAgB;;AAEthB,SAASO,eAAT,CAAyBI,GAAzB,EAA8BL,GAA9B,EAAmCM,KAAnC,EAA0C;AAAE,MAAIN,GAAG,IAAIK,GAAX,EAAgB;AAAErB,IAAAA,MAAM,CAACoB,cAAP,CAAsBC,GAAtB,EAA2BL,GAA3B,EAAgC;AAAEM,MAAAA,KAAK,EAAEA,KAAT;AAAgBhB,MAAAA,UAAU,EAAE,IAA5B;AAAkCiB,MAAAA,YAAY,EAAE,IAAhD;AAAsDC,MAAAA,QAAQ,EAAE;AAAhE,KAAhC;AAA0G,GAA5H,MAAkI;AAAEH,IAAAA,GAAG,CAACL,GAAD,CAAH,GAAWM,KAAX;AAAmB;;AAAC,SAAOD,GAAP;AAAa;;AAEjN,SAASI,GAAT,QAAoB,cAApB;AACA,SAASC,sBAAT,EAAiCC,0BAAjC,EAA6DC,yBAA7D,EAAwFC,6BAAxF,QAA6H,2BAA7H;AACA,SAASC,SAAT,EAAoBC,QAApB,EAA8BC,UAA9B,EAA0CC,SAA1C,EAAqDC,UAArD,EAAiEC,OAAjE,QAAgF,8BAAhF;AACA,SAASC,6BAAT,QAA8C,0BAA9C;AACA,SAASC,aAAT,EAAwBC,IAAI,IAAIC,SAAhC,QAAiD,sBAAjD;AACA,SAASC,YAAT,EAAuBC,OAAvB,EAAgCC,eAAhC,EAAiDC,SAAjD,QAAkE,oBAAlE;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,QAAT,QAAyB,uBAAzB;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,sBAArC;AACA,SAASC,MAAT,EAAiBC,KAAK,IAAIC,WAA1B,QAA6C,UAA7C;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,mBAAT,QAAoC,yBAApC;AACA,SAASC,aAAT,EAAwBJ,KAAK,IAAIK,aAAjC,QAAsD,mBAAtD,C,CAA2E;;AAE3E,IAAIC,eAAe,GAAG,SAASA,eAAT,CAAyBjC,KAAzB,EAAgC;AACpD,SAAO,QAAQkC,MAAR,CAAelC,KAAK,IAAI,EAAxB,EAA4B,GAA5B,CAAP;AACD,CAFD,C,CAEG;;;AAGH,OAAO,IAAI2B,KAAK,GAAGJ,QAAQ,CAACpC,aAAa,CAACA,aAAa,CAACA,aAAa,CAAC,EAAD,EAAKyC,WAAL,CAAd,EAAiCI,aAAjC,CAAd,EAA+D,EAA/D,EAAmE;AAC1GG,EAAAA,UAAU,EAAEX,QAAQ,CAACV,6BAAD;AADsF,CAAnE,CAAd,CAApB,C,CAEF;AACL;;AAEA,OAAO,IAAIsB,UAAU,GAAGjC,GAAG,CAACkC,MAAJ,CAAW;AACjCC,EAAAA,MAAM,EAAE,CAACP,aAAD,CADyB;AAEjCJ,EAAAA,KAAK,EAAEA,KAF0B;AAGjCY,EAAAA,aAAa,EAAE,SAASA,aAAT,GAAyB;AACtC,SAAKC,wBAAL,GAAgC,IAAhC;AACD,GALgC;AAMjCC,EAAAA,OAAO,EAAE;AACP;AACA;AACA;AACA;AACAC,IAAAA,WAAW,EAAE,SAASA,WAAT,GAAuB;AAClC,UAAIC,KAAK,GAAG,KAAKA,KAAjB;AACA,UAAIC,KAAK,GAAGD,KAAK,CAACC,KAAN,GAAcD,KAAK,CAACC,KAAN,CAAYC,GAAZ,IAAmBF,KAAK,CAACC,KAAvC,GAA+C,IAA3D;AACA,UAAIE,GAAG,GAAG,CAACH,KAAK,CAAC,WAAD,CAAL,IAAsB,EAAvB,EAA2BI,GAA3B,CAA+B,UAAUC,EAAV,EAAc;AACrD,eAAOA,EAAE,CAACH,GAAH,IAAUG,EAAjB;AACD,OAFS,CAAV;AAGA,aAAOJ,KAAK,IAAIA,KAAK,CAACK,QAAf,IAA2BL,KAAK,CAACK,QAAN,CAAe1D,MAAf,GAAwB,CAAnD,IAAwDuD,GAAxD,IAA+DA,GAAG,CAACvD,MAAJ,GAAa,CAA5E,GAAgF0B,SAAS,CAAC2B,KAAK,CAACK,QAAP,CAAT,CAA0BpE,MAA1B,CAAiC,UAAUmE,EAAV,EAAc;AACpI,eAAOjC,aAAa,CAAC+B,GAAD,EAAME,EAAN,CAApB;AACD,OAFsF,CAAhF;AAGP;AACA,QAJA;AAKD,KAhBM;AAiBP;AACA;AACAE,IAAAA,eAAe,EAAE,SAASA,eAAT,CAAyBC,EAAzB,EAA6B;AAC5C;AACA,UAAI,CAAC9B,SAAS,CAAC8B,EAAD,CAAd,EAAoB;AAClB,eAAO,CAAC,CAAR;AACD;;AAED,UAAIH,EAAE,GAAGG,EAAE,CAACC,OAAH,KAAe,IAAf,GAAsBD,EAAtB,GAA2BhC,OAAO,CAAC,IAAD,EAAOgC,EAAP,EAAW,IAAX,CAA3C;AACA,aAAOH,EAAE,GAAG,KAAKN,WAAL,GAAmBW,OAAnB,CAA2BL,EAA3B,CAAH,GAAoC,CAAC,CAA9C;AACD,KA3BM;AA4BP;AACAM,IAAAA,iBAAiB,EAAE,SAASA,iBAAT,CAA2BC,IAA3B,EAAiCC,KAAjC,EAAwC;AACzD,UAAID,IAAI,IAAI,KAAKE,WAAL,CAAiBF,IAAjB,CAAR,IAAkCC,KAAlC,IAA2CA,KAAK,CAACpE,MAArD,EAA6D;AAC3D,YAAIsE,QAAQ,GAAG,KAAKR,eAAL,CAAqBM,KAAK,CAACpE,MAA3B,CAAf;;AAEA,YAAIsE,QAAQ,GAAG,CAAC,CAAhB,EAAmB;AACjB;AACA,cAAIC,IAAI,GAAG,KAAKC,aAAL,CAAmBF,QAAnB,CAAX;AACA,eAAKG,KAAL,CAAWN,IAAX,EAAiBI,IAAjB,EAAuBD,QAAvB,EAAiCF,KAAjC;AACD;AACF;AACF,KAvCM;AAwCPM,IAAAA,kBAAkB,EAAE,SAASA,kBAAT,CAA4BN,KAA5B,EAAmC;AACrD,aAAO,KAAKO,UAAL,IAAmB,KAAKA,UAAL,CAAgBP,KAAhB,CAA1B;AACD,KA1CM;AA2CP;AACAQ,IAAAA,iBAAiB,EAAE,SAASA,iBAAT,CAA2BR,KAA3B,EAAkC;AACnD;AACA,UAAIpE,MAAM,GAAGoE,KAAK,CAACpE,MAAnB;AAAA,UACI6E,OAAO,GAAGT,KAAK,CAACS,OADpB;;AAGA,UAAI,KAAKH,kBAAL,CAAwBN,KAAxB,KAAkCpE,MAAM,CAACgE,OAAP,KAAmB,IAArD,IAA6D,CAAChC,eAAe,CAAChC,MAAD,CAA7E,IAAyFA,MAAM,CAAC8E,QAAP,KAAoB,CAAjH,EAAoH;AAClH;AACA;AACD;;AAED,UAAInD,aAAa,CAAC,CAACL,UAAD,EAAaE,UAAb,CAAD,EAA2BqD,OAA3B,CAAjB,EAAsD;AACpD;AACA3C,QAAAA,SAAS,CAACkC,KAAD,CAAT;AACA,aAAKW,iBAAL,CAAuBX,KAAvB;AACD,OAJD,MAIO,IAAIzC,aAAa,CAAC,CAACF,OAAD,EAAUL,SAAV,EAAqBG,SAArB,EAAgCF,QAAhC,CAAD,EAA4CwD,OAA5C,CAAjB,EAAuE;AAC5E;AACA,YAAIP,QAAQ,GAAG,KAAKR,eAAL,CAAqB9D,MAArB,CAAf;;AAEA,YAAIsE,QAAQ,GAAG,CAAC,CAAhB,EAAmB;AACjBpC,UAAAA,SAAS,CAACkC,KAAD,CAAT;AACA,cAAIV,GAAG,GAAG,KAAKJ,WAAL,EAAV;AACA,cAAI0B,KAAK,GAAGZ,KAAK,CAACa,QAAlB;;AAEA,cAAIJ,OAAO,KAAKtD,SAAZ,IAAyByD,KAAK,IAAIH,OAAO,KAAKpD,OAAlD,EAA2D;AACzD;AACAK,YAAAA,YAAY,CAAC4B,GAAG,CAAC,CAAD,CAAJ,CAAZ;AACD,WAHD,MAGO,IAAImB,OAAO,KAAKxD,QAAZ,IAAwB2D,KAAK,IAAIH,OAAO,KAAKzD,SAAjD,EAA4D;AACjE;AACAU,YAAAA,YAAY,CAAC4B,GAAG,CAACA,GAAG,CAACvD,MAAJ,GAAa,CAAd,CAAJ,CAAZ;AACD,WAHM,MAGA,IAAI0E,OAAO,KAAKpD,OAAZ,IAAuB6C,QAAQ,GAAG,CAAtC,EAAyC;AAC9C;AACAxC,YAAAA,YAAY,CAAC4B,GAAG,CAACY,QAAQ,GAAG,CAAZ,CAAJ,CAAZ;AACD,WAHM,MAGA,IAAIO,OAAO,KAAKzD,SAAZ,IAAyBkD,QAAQ,GAAGZ,GAAG,CAACvD,MAAJ,GAAa,CAArD,EAAwD;AAC7D;AACA2B,YAAAA,YAAY,CAAC4B,GAAG,CAACY,QAAQ,GAAG,CAAZ,CAAJ,CAAZ;AACD;AACF;AACF;AACF,KAlFM;AAmFPS,IAAAA,iBAAiB,EAAE,SAASA,iBAAT,CAA2BX,KAA3B,EAAkC;AACnD;AACA;AACA,UAAI,KAAKM,kBAAL,CAAwBN,KAAxB,KAAkC3B,WAAW,CAAC2B,KAAD,CAA7C,IAAwD1B,mBAAmB,CAAC,KAAKe,GAAN,CAA/E,EAA2F;AACzF;AACD;;AAED,WAAKS,iBAAL,CAAuBlD,sBAAvB,EAA+CoD,KAA/C;AACD,KA3FM;AA4FPc,IAAAA,+BAA+B,EAAE,SAASA,+BAAT,CAAyCd,KAAzC,EAAgD;AAC/E,UAAI,CAAC,KAAKM,kBAAL,CAAwBN,KAAxB,CAAD,IAAmCA,KAAK,CAACe,KAAN,KAAgB,CAAvD,EAA0D;AACxD,aAAKjB,iBAAL,CAAuB/C,6BAAvB,EAAsDiD,KAAtD;AACD;AACF,KAhGM;AAiGPgB,IAAAA,qBAAqB,EAAE,SAASA,qBAAT,CAA+BhB,KAA/B,EAAsC;AAC3D,UAAI,CAAC,KAAKM,kBAAL,CAAwBN,KAAxB,CAAL,EAAqC;AACnC,aAAKF,iBAAL,CAAuBjD,0BAAvB,EAAmDmD,KAAnD;AACD;AACF,KArGM;AAsGPiB,IAAAA,oBAAoB,EAAE,SAASA,oBAAT,CAA8BjB,KAA9B,EAAqC;AACzD,UAAI,CAAC,KAAKM,kBAAL,CAAwBN,KAAxB,CAAD,IAAmC,CAAC3B,WAAW,CAAC2B,KAAD,CAAnD,EAA4D;AAC1D,aAAKF,iBAAL,CAAuBhD,yBAAvB,EAAkDkD,KAAlD;AACD;AACF,KA1GM;AA2GP;AACA;AACA;AACA;AACAkB,IAAAA,WAAW,EAAE,SAASA,WAAT,GAAuB;AAClC,UAAIC,KAAK,GAAG,IAAZ;;AAEA,UAAIC,KAAK,GAAG,KAAKhB,aAAjB;AAAA,UACIiB,UAAU,GAAG,KAAKA,UADtB;AAAA,UAEIC,YAAY,GAAG,KAAKA,YAFxB;AAAA,UAGIC,WAAW,GAAG,KAAKA,WAHvB;AAAA,UAIIC,eAAe,GAAG,KAAKA,eAJ3B;AAKA,UAAIC,CAAC,GAAG,KAAKC,cAAb;AACA,UAAIC,kBAAkB,GAAG,KAAK1B,WAAL,CAAiBrD,sBAAjB,KAA4C,KAAKgF,qBAA1E,CATkC,CAS+D;;AAEjG,UAAIC,KAAK,GAAG,EAAZ,CAXkC,CAWlB;;AAEhB,UAAIC,KAAK,GAAGT,UAAU,GAAGA,UAAU,EAAb,GAAkB,IAAxC;;AAEA,UAAIS,KAAJ,EAAW;AACT;AACAD,QAAAA,KAAK,CAACpG,IAAN,CAAWqG,KAAX;AACD,OAHD,MAGO;AACL;AACA;AACA;AACA;AACA;AACA,YAAIC,KAAK,GAAG,EAAZ;AACA,YAAIC,eAAe,GAAGvD,eAAe,EAArC;AACAuD,QAAAA,eAAe,GAAG,KAAKC,iBAAL,CAAuBD,eAAvB,IAA0CA,eAA1C,GAA4D,IAA9E;AACA,aAAKE,cAAL,CAAoBjG,OAApB,CAA4B,UAAUkG,KAAV,EAAiB;AAC3C,cAAIjG,GAAG,GAAGiG,KAAK,CAACjG,GAAhB;AACA,cAAIkG,QAAQ,GAAG3D,eAAe,CAACvC,GAAD,CAA9B;AACA,cAAImG,iBAAiB,GAAG5D,eAAe,CAACvC,GAAG,CAACoG,WAAJ,EAAD,CAAvC;AACAP,UAAAA,KAAK,CAAC7F,GAAD,CAAL,GAAaiF,KAAK,CAACc,iBAAN,CAAwBG,QAAxB,IAAoCA,QAApC,GAA+CjB,KAAK,CAACc,iBAAN,CAAwBI,iBAAxB;AAC5D;AACAA,UAAAA,iBAF4D,GAExCL,eAFpB;AAGD,SAPD,EATK,CAgBD;AACJ;;AAEA,aAAKhD,wBAAL,GAAgC+C,KAAhC,CAnBK,CAmBkC;AACvC;;AAEAF,QAAAA,KAAK,CAACpG,IAAN,CAAW6F,YAAY,GAAGA,YAAY,EAAf,GAAoBG,CAAC,EAA5C,EAtBK,CAsB4C;;AAEjDL,QAAAA,KAAK,CAACnF,OAAN,CAAc,UAAUkE,IAAV,EAAgBD,QAAhB,EAA0B;AACtC;AACA2B,UAAAA,KAAK,CAACpG,IAAN,CAAW0F,KAAK,CAACoB,cAAN,CAAqBpC,IAArB,EAA2BD,QAA3B,CAAX;AACD,SAHD,EAxBK,CA2BD;;AAEJ2B,QAAAA,KAAK,CAACpG,IAAN,CAAW8F,WAAW,GAAGA,WAAW,EAAd,GAAmBE,CAAC,EAA1C,EA7BK,CA6B0C;AAC/C;;AAEAI,QAAAA,KAAK,CAACpG,IAAN,CAAW+F,eAAe,GAAGA,eAAe,EAAlB,GAAuBC,CAAC,EAAlD;AACD,OAnDiC,CAmDhC;;;AAGF,UAAIe,QAAQ,GAAG;AACbC,QAAAA,QAAQ,EAAE,KAAK3B,+BADF;AAEb;AACA;AACA;AACA;AACA4B,QAAAA,WAAW,EAAE,KAAK1B,qBANL;AAOb;AACA2B,QAAAA,QAAQ,EAAE,KAAK1B,oBARF,CAQuB;;AARvB,OAAf,CAtDkC,CAgE/B;;AAEH,UAAIU,kBAAJ,EAAwB;AACtBa,QAAAA,QAAQ,CAACI,KAAT,GAAiB,KAAKjC,iBAAtB;AACA6B,QAAAA,QAAQ,CAACK,OAAT,GAAmB,KAAKrC,iBAAxB;AACD,OArEiC,CAqEhC;;;AAGF,UAAIsC,MAAM,GAAGrB,CAAC,CAACvD,MAAD,EAAS;AACrB6E,QAAAA,KAAK,EAAE,KAAKpE,UAAL,IAAmB,IADL;AAErBR,QAAAA,KAAK,EAAEF,UAAU,CAACG,WAAD,EAAc,KAAK4E,MAAnB,CAFI;AAGrB;AACA;AACAC,QAAAA,EAAE,EAAET,QALiB;AAMrBU,QAAAA,GAAG,EAAE;AANgB,OAAT,EAOXrB,KAPW,CAAd,CAxEkC,CA+EvB;;AAEX,aAAOiB,MAAP;AACD;AAjMM;AANwB,CAAX,CAAjB","sourcesContent":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\r\n\r\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\r\n\r\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\r\n\r\nimport { Vue } from '../../../vue';\r\nimport { EVENT_NAME_ROW_CLICKED, EVENT_NAME_ROW_CONTEXTMENU, EVENT_NAME_ROW_DBLCLICKED, EVENT_NAME_ROW_MIDDLE_CLICKED } from '../../../constants/events';\r\nimport { CODE_DOWN, CODE_END, CODE_ENTER, CODE_HOME, CODE_SPACE, CODE_UP } from '../../../constants/key-codes';\r\nimport { PROP_TYPE_ARRAY_OBJECT_STRING } from '../../../constants/props';\r\nimport { arrayIncludes, from as arrayFrom } from '../../../utils/array';\r\nimport { attemptFocus, closest, isActiveElement, isElement } from '../../../utils/dom';\r\nimport { stopEvent } from '../../../utils/events';\r\nimport { sortKeys } from '../../../utils/object';\r\nimport { makeProp, pluckProps } from '../../../utils/props';\r\nimport { BTbody, props as BTbodyProps } from '../tbody';\r\nimport { filterEvent } from './filter-event';\r\nimport { textSelectionActive } from './text-selection-active';\r\nimport { tbodyRowMixin, props as tbodyRowProps } from './mixin-tbody-row'; // --- Helper methods ---\r\n\r\nvar getCellSlotName = function getCellSlotName(value) {\r\n  return \"cell(\".concat(value || '', \")\");\r\n}; // --- Props ---\r\n\r\n\r\nexport var props = sortKeys(_objectSpread(_objectSpread(_objectSpread({}, BTbodyProps), tbodyRowProps), {}, {\r\n  tbodyClass: makeProp(PROP_TYPE_ARRAY_OBJECT_STRING)\r\n})); // --- Mixin ---\r\n// @vue/component\r\n\r\nexport var tbodyMixin = Vue.extend({\r\n  mixins: [tbodyRowMixin],\r\n  props: props,\r\n  beforeDestroy: function beforeDestroy() {\r\n    this.$_bodyFieldSlotNameCache = null;\r\n  },\r\n  methods: {\r\n    // Returns all the item TR elements (excludes detail and spacer rows)\r\n    // `this.$refs['item-rows']` is an array of item TR components/elements\r\n    // Rows should all be `<b-tr>` components, but we map to TR elements\r\n    // Also note that `this.$refs['item-rows']` may not always be in document order\r\n    getTbodyTrs: function getTbodyTrs() {\r\n      var $refs = this.$refs;\r\n      var tbody = $refs.tbody ? $refs.tbody.$el || $refs.tbody : null;\r\n      var trs = ($refs['item-rows'] || []).map(function (tr) {\r\n        return tr.$el || tr;\r\n      });\r\n      return tbody && tbody.children && tbody.children.length > 0 && trs && trs.length > 0 ? arrayFrom(tbody.children).filter(function (tr) {\r\n        return arrayIncludes(trs, tr);\r\n      }) :\r\n      /* istanbul ignore next */\r\n      [];\r\n    },\r\n    // Returns index of a particular TBODY item TR\r\n    // We set `true` on closest to include self in result\r\n    getTbodyTrIndex: function getTbodyTrIndex(el) {\r\n      /* istanbul ignore next: should not normally happen */\r\n      if (!isElement(el)) {\r\n        return -1;\r\n      }\r\n\r\n      var tr = el.tagName === 'TR' ? el : closest('tr', el, true);\r\n      return tr ? this.getTbodyTrs().indexOf(tr) : -1;\r\n    },\r\n    // Emits a row event, with the item object, row index and original event\r\n    emitTbodyRowEvent: function emitTbodyRowEvent(type, event) {\r\n      if (type && this.hasListener(type) && event && event.target) {\r\n        var rowIndex = this.getTbodyTrIndex(event.target);\r\n\r\n        if (rowIndex > -1) {\r\n          // The array of TRs correlate to the `computedItems` array\r\n          var item = this.computedItems[rowIndex];\r\n          this.$emit(type, item, rowIndex, event);\r\n        }\r\n      }\r\n    },\r\n    tbodyRowEvtStopped: function tbodyRowEvtStopped(event) {\r\n      return this.stopIfBusy && this.stopIfBusy(event);\r\n    },\r\n    // Delegated row event handlers\r\n    onTbodyRowKeydown: function onTbodyRowKeydown(event) {\r\n      // Keyboard navigation and row click emulation\r\n      var target = event.target,\r\n          keyCode = event.keyCode;\r\n\r\n      if (this.tbodyRowEvtStopped(event) || target.tagName !== 'TR' || !isActiveElement(target) || target.tabIndex !== 0) {\r\n        // Early exit if not an item row TR\r\n        return;\r\n      }\r\n\r\n      if (arrayIncludes([CODE_ENTER, CODE_SPACE], keyCode)) {\r\n        // Emulated click for keyboard users, transfer to click handler\r\n        stopEvent(event);\r\n        this.onTBodyRowClicked(event);\r\n      } else if (arrayIncludes([CODE_UP, CODE_DOWN, CODE_HOME, CODE_END], keyCode)) {\r\n        // Keyboard navigation\r\n        var rowIndex = this.getTbodyTrIndex(target);\r\n\r\n        if (rowIndex > -1) {\r\n          stopEvent(event);\r\n          var trs = this.getTbodyTrs();\r\n          var shift = event.shiftKey;\r\n\r\n          if (keyCode === CODE_HOME || shift && keyCode === CODE_UP) {\r\n            // Focus first row\r\n            attemptFocus(trs[0]);\r\n          } else if (keyCode === CODE_END || shift && keyCode === CODE_DOWN) {\r\n            // Focus last row\r\n            attemptFocus(trs[trs.length - 1]);\r\n          } else if (keyCode === CODE_UP && rowIndex > 0) {\r\n            // Focus previous row\r\n            attemptFocus(trs[rowIndex - 1]);\r\n          } else if (keyCode === CODE_DOWN && rowIndex < trs.length - 1) {\r\n            // Focus next row\r\n            attemptFocus(trs[rowIndex + 1]);\r\n          }\r\n        }\r\n      }\r\n    },\r\n    onTBodyRowClicked: function onTBodyRowClicked(event) {\r\n      // Don't emit event when the table is busy, the user clicked\r\n      // on a non-disabled control or is selecting text\r\n      if (this.tbodyRowEvtStopped(event) || filterEvent(event) || textSelectionActive(this.$el)) {\r\n        return;\r\n      }\r\n\r\n      this.emitTbodyRowEvent(EVENT_NAME_ROW_CLICKED, event);\r\n    },\r\n    onTbodyRowMiddleMouseRowClicked: function onTbodyRowMiddleMouseRowClicked(event) {\r\n      if (!this.tbodyRowEvtStopped(event) && event.which === 2) {\r\n        this.emitTbodyRowEvent(EVENT_NAME_ROW_MIDDLE_CLICKED, event);\r\n      }\r\n    },\r\n    onTbodyRowContextmenu: function onTbodyRowContextmenu(event) {\r\n      if (!this.tbodyRowEvtStopped(event)) {\r\n        this.emitTbodyRowEvent(EVENT_NAME_ROW_CONTEXTMENU, event);\r\n      }\r\n    },\r\n    onTbodyRowDblClicked: function onTbodyRowDblClicked(event) {\r\n      if (!this.tbodyRowEvtStopped(event) && !filterEvent(event)) {\r\n        this.emitTbodyRowEvent(EVENT_NAME_ROW_DBLCLICKED, event);\r\n      }\r\n    },\r\n    // Render the tbody element and children\r\n    // Note:\r\n    //   Row hover handlers are handled by the tbody-row mixin\r\n    //   As mouseenter/mouseleave events do not bubble\r\n    renderTbody: function renderTbody() {\r\n      var _this = this;\r\n\r\n      var items = this.computedItems,\r\n          renderBusy = this.renderBusy,\r\n          renderTopRow = this.renderTopRow,\r\n          renderEmpty = this.renderEmpty,\r\n          renderBottomRow = this.renderBottomRow;\r\n      var h = this.$createElement;\r\n      var hasRowClickHandler = this.hasListener(EVENT_NAME_ROW_CLICKED) || this.hasSelectableRowClick; // Prepare the tbody rows\r\n\r\n      var $rows = []; // Add the item data rows or the busy slot\r\n\r\n      var $busy = renderBusy ? renderBusy() : null;\r\n\r\n      if ($busy) {\r\n        // If table is busy and a busy slot, then return only the busy \"row\" indicator\r\n        $rows.push($busy);\r\n      } else {\r\n        // Table isn't busy, or we don't have a busy slot\r\n        // Create a slot cache for improved performance when looking up cell slot names\r\n        // Values will be keyed by the field's `key` and will store the slot's name\r\n        // Slots could be dynamic (i.e. `v-if`), so we must compute on each render\r\n        // Used by tbody-row mixin render helper\r\n        var cache = {};\r\n        var defaultSlotName = getCellSlotName();\r\n        defaultSlotName = this.hasNormalizedSlot(defaultSlotName) ? defaultSlotName : null;\r\n        this.computedFields.forEach(function (field) {\r\n          var key = field.key;\r\n          var slotName = getCellSlotName(key);\r\n          var lowercaseSlotName = getCellSlotName(key.toLowerCase());\r\n          cache[key] = _this.hasNormalizedSlot(slotName) ? slotName : _this.hasNormalizedSlot(lowercaseSlotName) ?\r\n          /* istanbul ignore next */\r\n          lowercaseSlotName : defaultSlotName;\r\n        }); // Created as a non-reactive property so to not trigger component updates\r\n        // Must be a fresh object each render\r\n\r\n        this.$_bodyFieldSlotNameCache = cache; // Add static top row slot (hidden in visibly stacked mode\r\n        // as we can't control `data-label` attr)\r\n\r\n        $rows.push(renderTopRow ? renderTopRow() : h()); // Render the rows\r\n\r\n        items.forEach(function (item, rowIndex) {\r\n          // Render the individual item row (rows if details slot)\r\n          $rows.push(_this.renderTbodyRow(item, rowIndex));\r\n        }); // Empty items / empty filtered row slot (only shows if `items.length < 1`)\r\n\r\n        $rows.push(renderEmpty ? renderEmpty() : h()); // Static bottom row slot (hidden in visibly stacked mode\r\n        // as we can't control `data-label` attr)\r\n\r\n        $rows.push(renderBottomRow ? renderBottomRow() : h());\r\n      } // Note: these events will only emit if a listener is registered\r\n\r\n\r\n      var handlers = {\r\n        auxclick: this.onTbodyRowMiddleMouseRowClicked,\r\n        // TODO:\r\n        //   Perhaps we do want to automatically prevent the\r\n        //   default context menu from showing if there is a\r\n        //   `row-contextmenu` listener registered\r\n        contextmenu: this.onTbodyRowContextmenu,\r\n        // The following event(s) is not considered A11Y friendly\r\n        dblclick: this.onTbodyRowDblClicked // Hover events (`mouseenter`/`mouseleave`) are handled by `tbody-row` mixin\r\n\r\n      }; // Add in click/keydown listeners if needed\r\n\r\n      if (hasRowClickHandler) {\r\n        handlers.click = this.onTBodyRowClicked;\r\n        handlers.keydown = this.onTbodyRowKeydown;\r\n      } // Assemble rows into the tbody\r\n\r\n\r\n      var $tbody = h(BTbody, {\r\n        class: this.tbodyClass || null,\r\n        props: pluckProps(BTbodyProps, this.$props),\r\n        // BTbody transfers all native event listeners to the root element\r\n        // TODO: Only set the handlers if the table is not busy\r\n        on: handlers,\r\n        ref: 'tbody'\r\n      }, $rows); // Return the assembled tbody\r\n\r\n      return $tbody;\r\n    }\r\n  }\r\n});"]},"metadata":{},"sourceType":"module"}